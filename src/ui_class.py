# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtWebEngineWidgets, QtSvg
from PyQt5.QtGui import QPixmap
import global_variables
from map_class import *
from data import *
from charts import *

# symbolic constant to identify different combobox
COMBOBOX_OVERVIEW_HEALTH_DIAGNOSIS = 0
COMBOBOX_OVERVIEW_YEAR = 1
COMBOBOX_OVERVIEW_QUARTER = 2
COMBOBOX_OVERVIEW_VARIABLE = 3
COMBOBOX_OVERVIEW_INCREASE = 4
COMBOBOX_OVERVIEW_TREND = 5
COMBOBOX_COMPARISON_HEALTH_DIAGNOSIS = 6
COMBOBOX_COMPARISON_START_YEAR = 7
COMBOBOX_COMPARISON_END_YEAR = 8
COMBOBOX_COMPARISON_INCREASE_ONLY = 9

# symbolic constant to identify treemap version
TREEMAP_NORMAL_VER = 0
TREEMAP_INCREASEMENT_VER = 1

# dictionary for corresponding relationships between string and constant of health diagnosis
dataset_diagnosis_dic = {DATASET_DIAGNOSIS_IAPT_STR: DATASET_DIAGNOSIS_IAPT,
                         DATASET_DIAGNOSIS_CYPED_STR: DATASET_DIAGNOSIS_CYPED,
                         DATASET_DIAGNOSIS_PHSMI_STR: DATASET_DIAGNOSIS_PHSMI,
                         DATASET_DIAGNOSIS_OAPS_STR: DATASET_DIAGNOSIS_OAPS}

# dictionary for corresponding relationships between string and constant of time year
year_dic = {'2019/20': DATASET_TIME_YEAR_2019_20,
            '2020/21': DATASET_TIME_YEAR_2020_21,
            '2021/22': DATASET_TIME_YEAR_2021_22}

# # dictionary for corresponding relationships between string and constant of time quarter
quarter_dic = {'Quarter1': DATASET_TIME_QUARTER1, 'Quarter2': DATASET_TIME_QUARTER2,
               'Quarter3': DATASET_TIME_QUARTER3, 'Quarter4': DATASET_TIME_QUARTER4}


class MapUi(object):
    """
    Class for GUI
    """
    def setup_ui(self, Form):
        """
        set up kinds of GUI widgets
        :param Form: main window supposed to include these GUI widgets
        :return: none
        """
        Form.setObjectName("Form")
        Form.resize(1407, 824)
        self.map_widget = QtWebEngineWidgets.QWebEngineView(Form)
        self.map_widget.setGeometry(QtCore.QRect(0, 0, 1131, 821))
        self.map_widget.setUrl(QtCore.QUrl("about:blank"))
        self.map_widget.setObjectName("map_widget")

        # set up GUI widgets of the choropleth map user options (Overview Functionality)
        self.dataset_type_box = QtWidgets.QComboBox(Form)
        self.dataset_type_box.setGeometry(QtCore.QRect(1250, 80, 141, 26))
        self.dataset_type_box.setObjectName("dataset_type_box")
        self.dataset_type_label = QtWidgets.QLabel(Form)
        self.dataset_type_label.setGeometry(QtCore.QRect(1140, 80, 101, 21))
        self.dataset_type_label.setObjectName("dataset_type_label")
        self.year_box = QtWidgets.QComboBox(Form)
        self.year_box.setGeometry(QtCore.QRect(1250, 120, 141, 26))
        self.year_box.setObjectName("year_box")
        self.year_label = QtWidgets.QLabel(Form)
        self.year_label.setGeometry(QtCore.QRect(1180, 120, 41, 16))
        self.year_label.setObjectName("year_label")
        self.quarter_box = QtWidgets.QComboBox(Form)
        self.quarter_box.setGeometry(QtCore.QRect(1250, 160, 141, 26))
        self.quarter_box.setObjectName("quarter_box")
        self.quarter_label = QtWidgets.QLabel(Form)
        self.quarter_label.setGeometry(QtCore.QRect(1170, 160, 51, 20))
        self.quarter_label.setObjectName("quarter_label")
        self.select_dataset_label = QtWidgets.QLabel(Form)
        self.select_dataset_label.setGeometry(QtCore.QRect(1230, 40, 111, 16))
        self.select_dataset_label.setObjectName("select_dataset_label")
        self.overview_increse_box = QtWidgets.QCheckBox(Form)
        self.overview_increse_box.setGeometry(QtCore.QRect(1250, 240, 121, 20))
        self.overview_increse_box.setObjectName("checkBox_overview_increse")
        self.var_box = QtWidgets.QComboBox(Form)
        self.var_box.setGeometry(QtCore.QRect(1250, 200, 141, 26))
        self.var_box.setObjectName("comboBox_overview_var")
        self.var_label = QtWidgets.QLabel(Form)
        self.var_label.setGeometry(QtCore.QRect(1170, 200, 60, 16))
        self.var_label.setObjectName("label_overview_var")
        #self.overview_trend_box = QtWidgets.QCheckBox(Form)
        #self.overview_trend_box.setGeometry(QtCore.QRect(1250, 270, 111, 20))
        #self.overview_trend_box.setObjectName("checkBox_overview_trend")

        # set up GUI widgets of the time-oriented treemap user options (Data Comparison Functionality)
        self.data_compare_label = QtWidgets.QLabel(Form)
        self.data_compare_label.setGeometry(QtCore.QRect(1220, 360, 121, 20))
        self.data_compare_label.setObjectName("data_compare_label")
        self.dia_label = QtWidgets.QLabel(Form)
        self.dia_label.setGeometry(QtCore.QRect(1150, 400, 111, 16))
        self.dia_label.setObjectName("dia_label")
        self.start_year_label = QtWidgets.QLabel(Form)
        self.start_year_label.setGeometry(QtCore.QRect(1190, 440, 60, 16))
        self.start_year_label.setObjectName("start_year_label")
        self.end_year_label = QtWidgets.QLabel(Form)
        self.end_year_label.setGeometry(QtCore.QRect(1190, 480, 60, 21))
        self.end_year_label.setObjectName("end_year_label")
        self.dia_box = QtWidgets.QComboBox(Form)
        self.dia_box.setGeometry(QtCore.QRect(1260, 400, 141, 26))
        self.dia_box.setObjectName("dia_box")
        self.start_year_box = QtWidgets.QComboBox(Form)
        self.start_year_box.setGeometry(QtCore.QRect(1260, 440, 141, 26))
        self.start_year_box.setObjectName("start_year_box")
        self.end_year_box = QtWidgets.QComboBox(Form)
        self.end_year_box.setGeometry(QtCore.QRect(1260, 480, 141, 26))
        self.end_year_box.setObjectName("end_year_box")
        self.checkBox = QtWidgets.QCheckBox(Form)
        self.checkBox.setGeometry(QtCore.QRect(1250, 520, 161, 20))
        self.checkBox.setObjectName("checkBox")

        self.retranslate_ui(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslate_ui(self, Form):
        """
        init initial value of GUI widgets
        :param Form: main window
        :return: none
        """
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Map of NHS Mental Health population data in England",
                                       "Map of NHS Mental Health population data in England"))
        self.dataset_type_label.setText(_translate("Form", "Health Diagnosis"))
        self.year_label.setText(_translate("Form", "Year"))
        self.quarter_label.setText(_translate("Form", "Quarter"))
        self.select_dataset_label.setText(_translate("Form", "Overview of Data"))
        self.data_compare_label.setText(_translate("Form", "Data Comparision"))
        self.dia_label.setText(_translate("Form", "Health Diagnosis"))
        self.start_year_label.setText(_translate("Form", "Start Year"))
        self.end_year_label.setText(_translate("Form", "End Year"))
        self.checkBox.setText(_translate("Form", "Increase only"))
        self.overview_increse_box.setText(_translate("Form", "Increase only"))
        self.var_label.setText(_translate("Form", "variable"))
        #self.overview_trend_box.setText(_translate("Form", "Trend by year"))

        self.combobox_init(COMBOBOX_OVERVIEW_HEALTH_DIAGNOSIS, self.dataset_type_box)
        self.combobox_init(COMBOBOX_OVERVIEW_YEAR, self.year_box)
        self.combobox_init(COMBOBOX_OVERVIEW_QUARTER, self.quarter_box)
        self.combobox_init(COMBOBOX_OVERVIEW_VARIABLE, self.var_box)
        self.combobox_init(COMBOBOX_OVERVIEW_INCREASE, self.overview_increse_box)
        #self.combobox_init(COMBOBOX_OVERVIEW_TREND, self.overview_trend_box)
        self.combobox_init(COMBOBOX_COMPARISON_HEALTH_DIAGNOSIS, self.dia_box)
        self.combobox_init(COMBOBOX_COMPARISON_START_YEAR, self.start_year_box)
        self.combobox_init(COMBOBOX_COMPARISON_END_YEAR, self.end_year_box)
        #self.combobox_init(COMBOBOX_COMPARISON_CCG, self.ccg_box)
        self.checkbox_init(COMBOBOX_COMPARISON_INCREASE_ONLY, self.checkBox)

    def combobox_overview_var_init(self, diagnosis):
        """
        init Drop-down box with a list of variables for a specific health diagnosis dataset
        :param diagnosis:
        :return:
        """
        dataset = 0
        # get a list of variables for different health diagnoses,
        if diagnosis == DATASET_DIAGNOSIS_IAPT:
            dataset = global_variables.get_value(global_variables.KEY_DATASET_IAPT)
        elif diagnosis == DATASET_DIAGNOSIS_CYPED:
            dataset = global_variables.get_value(global_variables.KEY_DATASET_CYPED)
        elif diagnosis == DATASET_DIAGNOSIS_PHSMI:
            dataset = global_variables.get_value(global_variables.KEY_DATASET_PHSMI)
        elif diagnosis == DATASET_DIAGNOSIS_OAPS:
            dataset = global_variables.get_value(global_variables.KEY_DATASET_OAPS)
        # init Drop-down box
        for var in dataset[DATASET_TIME_YEAR_2019_20][DATASET_TIME_QUARTER1].variable_list:
            if var != '':
                self.var_box.addItem(var)

    def combobox_overview_update_var(self):
        """
        update the content (a list of variables) of Drop-down box for a specific health diagnosis
        :return: none
        """
        self.var_box.blockSignals(True)
        # clear the current list of Drop-down box
        self.var_box.clear()
        # get current health diagnosis (string -> symbolic constant) chosen by the user
        diagnosis = dataset_diagnosis_dic[self.dataset_type_box.currentText()]
        # update the content list for a specific health diagnosis
        self.combobox_overview_var_init(diagnosis)
        self.var_box.blockSignals(False)

    def combobox_overview_diagnosis_callback(self):
        """
        callback function when selected content of Drop-down box for health diagnosis changes
        :return: none
        """
        # update the content (a list of variables) of Drop-down box for a specific health diagnosis
        self.combobox_overview_update_var()
        self.combobox_overview_callback()

    def combobox_overview_callback(self):
        """
        callback function when selected content of any one of widgets changes in overview functionality
        :return: none
        """
        # get the current selected content of Drop-down box for health diagnosis, year, quarter, and variable
        type = dataset_diagnosis_dic[self.dataset_type_box.currentText()]
        year = year_dic[self.year_box.currentText()]
        quarter = quarter_dic[self.quarter_box.currentText()]
        var = self.var_box.currentText()

        # check if the radio box is selected
        # check if users choose the increasing version of choropleth map and load corresponding map
        if self.overview_increse_box.isChecked():
            self.load_map(MAP_INCREASE_VER, type, year, quarter, var)
        else:
            self.load_map(MAP_NORMAL_VER, type, year, quarter, var)

    def combobox_comparison_callback(self):
        """
        callback function when selected content of any one of widgets changes in data comparison functionality
        :return: none
        """
        # get the current selected content of Drop-down box for diagnosis, start year, and end year
        diagnosis = dataset_diagnosis_dic[self.dia_box.currentText()]
        start_year = year_dic[self.start_year_box.currentText()]
        end_year = year_dic[self.end_year_box.currentText()]
        # check if the radio box is selected
        # check if users choose the increasing version of choropleth map and load corresponding map
        if self.checkBox.isChecked():
            self.load_charts(TREEMAP_INCREASEMENT_VER, diagnosis, start_year, end_year)
        else:
            self.load_charts(TREEMAP_NORMAL_VER, diagnosis, start_year, end_year)

    def combobox_init(self, index, box):
        """
        init the list of content for a specific Drop-down box or Radio box
        :param index: symbolic constant to identify diffent widgets
        :param box: box variable
        :return: none
        """
        # get global variable for the choropleth map
        myMap = global_variables.get_value(global_variables.KEY_MAP)
        # init Drop-down box for health diagnosis in Overview functionality
        if index == COMBOBOX_OVERVIEW_HEALTH_DIAGNOSIS:
            # init the list of content of Drop-down box for health diagnosis
            for type in myMap.dataset_type_list:
                box.addItem(type)
            # bind the callback function
            box.currentIndexChanged.connect(self.combobox_overview_diagnosis_callback)
        # init Drop-down box for year in Overview functionality
        elif index == COMBOBOX_OVERVIEW_YEAR:
            for i in range(3):
                box.addItem(f'{2019+i}/{20+i}')
            box.currentIndexChanged.connect(self.combobox_overview_callback)
        # init Drop-down box for quarter in Overview functionality
        elif index == COMBOBOX_OVERVIEW_QUARTER:
            for i in range(4):
                box.addItem('Quarter' + f'{i + 1}')
            box.currentIndexChanged.connect(self.combobox_overview_callback)
        # init Drop-down box for variable in Overview functionality
        elif index == COMBOBOX_OVERVIEW_VARIABLE:
            diagnosis = dataset_diagnosis_dic[self.dataset_type_box.currentText()]
            self.combobox_overview_var_init(diagnosis)
            box.currentIndexChanged.connect(self.combobox_overview_callback)
        # init Radio box for increase-only in Overview functionality
        elif index == COMBOBOX_OVERVIEW_INCREASE:
            box.stateChanged.connect(self.combobox_overview_callback)
        # init Drop-down box for health diagnosis in Data Comparison functionality
        elif index == COMBOBOX_COMPARISON_HEALTH_DIAGNOSIS:
            for type in myMap.dataset_type_list:
                box.addItem(type)
            box.currentIndexChanged.connect(self.combobox_comparison_callback)
        # init Drop-down box for start year or end year in Data Comparison functionality
        elif index == COMBOBOX_COMPARISON_START_YEAR or index == COMBOBOX_COMPARISON_END_YEAR:
            for i in range(3):
                box.addItem(f'{2019+i}/{20+i}')
            box.currentIndexChanged.connect(self.combobox_comparison_callback)

    def checkbox_callback(self):
        """
        callback function for radio box
        :return:
        """
        # get the current selected content of health diagnosis, start year, and end year
        diagnosis = dataset_diagnosis_dic[self.dia_box.currentText()]
        start_year = year_dic[self.start_year_box.currentText()]
        end_year = year_dic[self.end_year_box.currentText()]
        # check if radio box of increase-only for Treemap is selected, load the corresponding treemap
        if self.checkBox.isChecked():
            self.load_charts(TREEMAP_INCREASEMENT_VER, diagnosis, start_year, end_year)
        else:
            self.load_charts(TREEMAP_NORMAL_VER, diagnosis, start_year, end_year)

    def checkbox_init(self, index, box):
        """
        init radio box
        :param index:
        :param box: variable for radio box
        :return: none
        """
        # bind callback function for radio box
        box.stateChanged.connect(self.checkbox_callback)

    def load_map(self, version, type, year, quarter, var):
        """
        1. get map html file name according to input parameters
        2. check if the file has existed, if exists, then load it from local disks directly
           if not, then create a map and then load it into GUI
        :param version: MAP_NORMAL_VER-normal maps, MAP_INCREASE_VER-maps that represent growth
        :param type: symbolic constant to identify health diagnosis
        :param year: symbolic constant to identify years
        :param quarter: symbolic constant to identify quarters
        :param var: symbolic constant to identify variable
        :return: none
        """
        myMap = global_variables.get_value(global_variables.KEY_MAP)
        file_name = ''

        # if it is normal map, then get the html map file name and check if the file has existed
        if version == MAP_NORMAL_VER:
            file_name = myMap.choropleth_map_html_file_name_get(version, type, year, quarter, var)
            # if not existed, then create map
            if not os.path.exists(file_name):
                myMap.create_choropleth_map(type, year, quarter, var)
        elif version == MAP_INCREASE_VER:
            file_name = myMap.choropleth_map_html_file_name_get(version, type, DATASET_TIME_YEAR_2019_20,
                                                                DATASET_TIME_QUARTER1, var)
            if not os.path.exists(file_name):
                myMap.create_choropleth_map_increase_ver(type, var, DATASET_TIME_YEAR_2019_20, DATASET_TIME_YEAR_2021_22)
        # load map html file from local disks
        map_html = QtCore.QUrl.fromLocalFile(file_name)
        # load map html file into GUI
        self.map_widget.load(map_html)

    def load_charts(self, version, diagnosis, start_year, end_year):
        """
        load treemap
        :param version: MAP_NORMAL_VER-normal maps, MAP_INCREASE_VER-maps that represent growth
        :param diagnosis: symbolic constant to identify health diagnosis
        :param start_year: symbolic constant to identify years
        :param end_year: symbolic constant to identify years
        :return: none
        """
        myMap = global_variables.get_value(global_variables.KEY_MAP)
        treemap = None
        map_path = treemap_html_file_name_get(myMap.new_file_path, version, diagnosis, start_year, end_year)
        if not os.path.exists(map_path):
            # create treemap according to the map version
            if version == TREEMAP_NORMAL_VER:
                tree_map = create_tree_map_by_year(diagnosis, start_year, end_year)
            elif version == TREEMAP_INCREASEMENT_VER:
                tree_map = create_tree_map_by_year_increasement(diagnosis, start_year, end_year)
            if tree_map is not None:
                # save a treemap with the file name
                tree_map.write_html(map_path)
        # load treemap
        map_html = QtCore.QUrl.fromLocalFile(map_path)
        self.map_widget.load(map_html)




